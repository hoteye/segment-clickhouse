# AI Analysis Module 配置文件

server:
  port: 8082
  servlet:
    context-path: /ai-analysis
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  application:
    name: ai-analysis-service
  # HTTP 编码配置
  http:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  # 数据源配置 - ClickHouse
  datasource:
    driver-class-name: com.clickhouse.jdbc.ClickHouseDriver
    url: ${CLICKHOUSE_URL:jdbc:clickhouse://192.168.100.6:8123/default?use_time_zone=UTC+8&use_server_time_zone=UTC+8}
    username: ${CLICKHOUSE_USERNAME:root}
    password: ${CLICKHOUSE_PASSWORD:123456}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  # JPA/Hibernate 配置 (ClickHouse 不完全支持 JPA，主要用于基础数据源管理)
  jpa:
    hibernate:
      ddl-auto: none  # ClickHouse 不支持自动建表
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect  # ClickHouse 没有专用方言，使用 PostgreSQL
        format_sql: true

# AI 分析配置
ai:
  analysis:
    enabled: true
    window:
      hours: 1  # 默认分析时间窗口（小时）
    schedule:
      enabled: true
      cron: "0 0 */1 * * ?"  # 每小时执行一次
    thresholds:
      response-time-ms: 1000      # 响应时间阈值（毫秒）
      error-rate-percent: 5.0     # 错误率阈值（百分比）
      cpu-usage-percent: 80.0     # CPU使用率阈值（百分比）
      memory-usage-percent: 85.0  # 内存使用率阈值（百分比）
      
  # LLM 配置
  llm:
    provider: deepseek  # 改为使用 deepseek
    enabled: true
    fallback-enabled: true  # 启用降级分析
    
    # OpenAI 配置
    openai:
      api-key: ${AI_OPENAI_API_KEY:}
      base-url: ${AI_OPENAI_BASE_URL:https://api.openai.com/v1}
      model: ${AI_OPENAI_MODEL:gpt-3.5-turbo}
      timeout: 30000
      max-tokens: 2000
      temperature: 0.7
    
    # Azure OpenAI 配置
    azure:
      api-key: ${AI_AZURE_API_KEY:}
      endpoint: ${AI_AZURE_ENDPOINT:}
      deployment-name: ${AI_AZURE_DEPLOYMENT:}
      api-version: ${AI_AZURE_API_VERSION:2023-05-15}
      # DeepSeek 配置
    deepseek:
      api-key: ${AI_DEEPSEEK_API_KEY:sk-af87414f0b044883a76f2a297b6eaf86}
      base-url: ${AI_DEEPSEEK_BASE_URL:https://api.deepseek.com/v1}
      model: ${AI_DEEPSEEK_MODEL:deepseek-reasoner}
      timeout: 15000    # 减少超时时间到15秒
      max-tokens: 3000
      temperature: 0.7
    
    # 本地 LLM 配置 (Ollama)
    local:
      url: ${AI_LOCAL_LLM_URL:http://localhost:11434}
      model: ${AI_LOCAL_LLM_MODEL:llama2}
      timeout: 60000

# ClickHouse 配置
clickhouse:
  connection:
    url: ${CLICKHOUSE_URL:jdbc:clickhouse://localhost:8123/default?password=}
    username: ${CLICKHOUSE_USERNAME:root}
    password: ${CLICKHOUSE_PASSWORD:123456}
    socket-timeout: 30000
    connection-timeout: 10000
    max-rows-to-read: 1000000
    max-result-rows: 100000
  query:
    # 性能数据查询相关表
    tables:
      events: "events"                        # 事件数据表（包含 segmentObject 详细信息）
      operator_metrics: "flink_operator_agg_result"  # Flink 算子聚合结果表
      error_logs: "error_logs"                # 错误日志表（如果存在）
      trace_data: "trace_data"                # 追踪数据表（如果存在）    # 分析报告存储表
    reports:
      performance_reports: "ai_performance_reports"
      anomaly_reports: "ai_anomaly_reports"      
      optimization_suggestions: "ai_optimization_suggestions"

# 报告配置
report:
  storage:
    enabled: true
    path: ${AI_REPORT_PATH:./reports}
    retention-days: 30
  email:
    enabled: false
    smtp:
      host: ${SMTP_HOST:}
      port: ${SMTP_PORT:587}
      username: ${SMTP_USERNAME:}
      password: ${SMTP_PASSWORD:}
    recipients:
      - admin@example.com

# 日志配置
logging:
  level:
    com.o11y.ai: INFO
    org.springframework: WARN
    com.clickhouse: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/ai-analysis.log
    max-size: 100MB
    max-history: 30

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
